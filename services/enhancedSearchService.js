/**
 * Service pour les fonctionnalit√©s de recherche am√©lior√©es
 */
const whatsappService = require('./whatsappService');
const sessionManager = require('./sessionManager');
const glpiService = require('./glpiService');
const notificationService = require('./notificationService');

/**
 * D√©marre le mode recherche par ID de ticket avec une interface am√©lior√©e
 * @param {string} from - Le num√©ro de t√©l√©phone de l'utilisateur
 */
async function startEnhancedTicketSearch(from) {
  try {
    console.log(`D√©marrage de la recherche am√©lior√©e par ID pour ${from}`);

    // R√©cup√©rer la session existante pour v√©rifier les tickets r√©cents
    let userSession = await sessionManager.getSession(from);
    
    // Cr√©er une session avec un √©tat initial de recherche
    userSession = {
      ...userSession,
      currentStep: 'search_by_id',
      searchMode: true
    };
    await sessionManager.saveSession(from, userSession);

    // Envoyer un message demandant l'ID du ticket avec des instructions claires
    const message = "üîé *Recherche de ticket par ID*\n\nVeuillez entrer le num√©ro du ticket que vous souhaitez rechercher.\n\nExemple: 12345\n\n‚ÑπÔ∏è Vous pouvez aussi utiliser les boutons ci-dessous pour acc√©der rapidement √† des options.";

    // Pr√©parer les boutons pour une meilleure UX
    const buttons = [];
    
    // Ajouter des boutons pour les tickets r√©cents si disponibles
    if (userSession.lastCreatedTicketId) {
      buttons.push({
        type: "reply",
        reply: {
          id: `search_ticket_${userSession.lastCreatedTicketId}`,
          title: `üéü Dernier ticket #${userSession.lastCreatedTicketId}`
        }
      });
    }
    
    // Ajouter des boutons pour les tickets r√©cemment consult√©s
    const recentTickets = userSession.recentTickets || [];
    if (recentTickets.length > 0) {
      // Limiter √† 2 tickets r√©cents pour ne pas surcharger l'interface
      const recentTicketButtons = recentTickets.slice(0, 2).map(ticketId => ({
        type: "reply",
        reply: {
          id: `search_ticket_${ticketId}`,
          title: `üîç Ticket #${ticketId}`
        }
      }));
      buttons.push(...recentTicketButtons);
    }
    
    // Ajouter des boutons pour les options de navigation
    buttons.push(
      {
        type: "reply",
        reply: {
          id: "track_ticket",
          title: "üìù Suivre un ticket"
        }
      },
      {
        type: "reply",
        reply: {
          id: "back_to_menu",
          title: "üè† Menu principal"
        }
      }
    );

    await whatsappService.sendButtonsMessage(from, message, buttons, "Recherche ticket");
  } catch (error) {
    console.error(`Erreur lors du d√©marrage de la recherche am√©lior√©e pour ${from}:`, error);
    await whatsappService.sendMessage(
        from,
        "D√©sol√©, une erreur s'est produite. Veuillez r√©essayer en envoyant 'reset'."
    );
  }
}

/**
 * Affiche les d√©tails d'un ticket avec des options interactives am√©lior√©es
 * @param {string} phoneNumber - Num√©ro de t√©l√©phone de l'utilisateur
 * @param {number} ticketId - ID du ticket √† afficher
 */
async function displayEnhancedTicketDetails(phoneNumber, ticketId) {
  try {
    // R√©cup√©rer les d√©tails du ticket
    const ticketDetails = await glpiService.getTicket(ticketId);
    
    if (!ticketDetails) {
      await whatsappService.sendMessage(
        phoneNumber,
        `‚ö†Ô∏è Le ticket #${ticketId} n'a pas √©t√© trouv√©. Veuillez v√©rifier le num√©ro et r√©essayer.`
      );
      return;
    }
    
    // V√©rifier si l'utilisateur est abonn√© aux notifications pour ce ticket
    const isSubscribed = notificationService.isSubscribedToTicket(phoneNumber, ticketId);
    
    // Formater le message avec les d√©tails du ticket
    let message = `üé´ *Ticket #${ticketId}*\n\n`;
    message += `üìã *Titre:* ${ticketDetails.name}\n`;
    message += `üìù *Description:* ${ticketDetails.content}\n`;
    message += `üîÑ *Statut:* ${ticketDetails.status}\n`;
    message += `‚è±Ô∏è *Urgence:* ${ticketDetails.urgency}\n`;
    message += `üìÖ *Date d'ouverture:* ${new Date(ticketDetails.date).toLocaleString()}\n`;
    
    if (ticketDetails.technicians && ticketDetails.technicians.length > 0) {
      message += `üë®‚Äçüíª *Technicien(s):* ${ticketDetails.technicians.join(', ')}\n`;
    }
    
    // Pr√©parer les boutons d'action (premi√®re ligne)
    const actionButtons = [
      {
        type: "reply",
        reply: {
          id: `comment_ticket_${ticketId}`,
          title: "üìù Ajouter commentaire"
        }
      },
      {
        type: "reply",
        reply: {
          id: `add_followup_${ticketId}`,
          title: "üí¨ Ajouter suivi"
        }
      }
    ];
    
    // Pr√©parer les boutons d'attribution (deuxi√®me ligne)
    const assignButtons = [
      {
        type: "reply",
        reply: {
          id: `assign_technician_${ticketId}`,
          title: "üë®‚Äçüíª Attribuer technicien"
        }
      },
      {
        type: "reply",
        reply: {
          id: isSubscribed ? `unsubscribe_ticket_${ticketId}` : `subscribe_ticket_${ticketId}`,
          title: isSubscribed ? "üîï Se d√©sabonner" : "üîî S'abonner"
        }
      }
    ];
    
    // Pr√©parer les boutons de navigation (troisi√®me ligne)
    const navigationButtons = [
      {
        type: "reply",
        reply: {
          id: `track_another_ticket`,
          title: "üîç Autre ticket"
        }
      },
      {
        type: "reply",
        reply: {
          id: "back_to_menu",
          title: "üè† Menu principal"
        }
      }
    ];
    
    // Combiner tous les boutons
    const allButtons = [...actionButtons, ...assignButtons, ...navigationButtons];
    
    // Envoyer le message avec les boutons
    await whatsappService.sendButtonsMessage(
      phoneNumber,
      "D√©tails du ticket",
      message,
      allButtons
    );
    
    // Sauvegarder ce ticket dans la liste des tickets r√©cemment consult√©s
    const userSession = await sessionManager.getSession(phoneNumber);
    const recentTickets = userSession.recentTickets || [];
    
    // Ajouter le ticket actuel en t√™te de liste et limiter √† 5 tickets
    if (!recentTickets.includes(ticketId)) {
      recentTickets.unshift(ticketId);
      if (recentTickets.length > 5) {
        recentTickets.pop();
      }
    }
    
    // Mettre √† jour la session
    userSession.recentTickets = recentTickets;
    await sessionManager.saveSession(phoneNumber, userSession);
    
  } catch (error) {
    console.error(`Erreur lors de l'affichage des d√©tails du ticket ${ticketId} pour ${phoneNumber}:`, error);
    await whatsappService.sendMessage(
      phoneNumber,
      `‚ùå Une erreur s'est produite lors de l'affichage des d√©tails du ticket #${ticketId}. Veuillez r√©essayer plus tard.`
    );
  }
}

module.exports = {
  startEnhancedTicketSearch,
  displayEnhancedTicketDetails
};
