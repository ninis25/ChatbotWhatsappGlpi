/**
 * Service de surveillance des tickets GLPI
 * Permet de d√©tecter les changements dans les tickets et d'envoyer des notifications
 */

const glpiService = require('./glpiService');
const notificationService = require('./notificationService');
const whatsappService = require('./whatsappService');

// Stockage de l'√©tat des tickets
// Format: { ticketId: { lastUpdate: timestamp, status: statusId, ... } }
const ticketStates = {};

const ticketMonitorService = {
  /**
   * Initialiser le service de surveillance
   * @returns {void}
   */
  init: () => {
    console.log('Initialisation du service de surveillance des tickets GLPI');
    
    // D√©marrer la surveillance p√©riodique
    setInterval(async () => {
      await ticketMonitorService.checkForUpdates();
    }, 5 * 60 * 1000); // V√©rifier toutes les 5 minutes
  },
  
  /**
   * V√©rifier les mises √† jour des tickets
   * @returns {Promise<void>}
   */
  checkForUpdates: async () => {
    try {
      console.log('V√©rification des mises √† jour des tickets GLPI');
      
      // R√©cup√©rer la liste des tickets surveill√©s
      const monitoredTickets = notificationService.getAllMonitoredTickets();
      
      if (monitoredTickets.length === 0) {
        console.log('Aucun ticket surveill√©');
        return;
      }
      
      console.log(`V√©rification de ${monitoredTickets.length} tickets surveill√©s`);
      
      // V√©rifier chaque ticket
      for (const ticketId of monitoredTickets) {
        await ticketMonitorService.checkTicketUpdates(ticketId);
      }
    } catch (error) {
      console.error('Erreur lors de la v√©rification des mises √† jour des tickets:', error);
    }
  },
  
  /**
   * V√©rifier les mises √† jour d'un ticket sp√©cifique
   * @param {number} ticketId - ID du ticket
   * @returns {Promise<void>}
   */
  checkTicketUpdates: async (ticketId) => {
    try {
      // R√©cup√©rer les d√©tails du ticket
      const ticketDetails = await glpiService.getTicket(ticketId);
      
      if (!ticketDetails) {
        console.log(`Ticket #${ticketId} non trouv√©`);
        return;
      }
      
      // V√©rifier si c'est la premi√®re fois que nous surveillons ce ticket
      if (!ticketStates[ticketId]) {
        // Enregistrer l'√©tat initial du ticket
        ticketStates[ticketId] = {
          lastUpdate: new Date(ticketDetails.date_mod).getTime(),
          status: ticketDetails.status,
          assignedUser: ticketDetails.users_id_recipient,
          assignedGroup: ticketDetails.groups_id_assign,
          followups: await ticketMonitorService.getTicketFollowupsCount(ticketId)
        };
        
        console.log(`√âtat initial du ticket #${ticketId} enregistr√©`);
        return;
      }
      
      // R√©cup√©rer l'√©tat pr√©c√©dent du ticket
      const previousState = ticketStates[ticketId];
      
      // V√©rifier si le ticket a √©t√© modifi√© depuis la derni√®re v√©rification
      const currentUpdateTime = new Date(ticketDetails.date_mod).getTime();
      
      if (currentUpdateTime > previousState.lastUpdate) {
        console.log(`Ticket #${ticketId} modifi√© depuis la derni√®re v√©rification`);
        
        // V√©rifier les changements sp√©cifiques
        
        // Changement de statut
        if (ticketDetails.status !== previousState.status) {
          console.log(`Statut du ticket #${ticketId} modifi√©: ${previousState.status} -> ${ticketDetails.status}`);
          
          // Notifier les abonn√©s
          await notificationService.notifyTicketSubscribers(ticketId, 'status', {
            status: ticketDetails.status,
            previousStatus: previousState.status
          });
        }
        
        // Changement d'attribution (utilisateur)
        if (ticketDetails.users_id_recipient !== previousState.assignedUser) {
          console.log(`Attribution du ticket #${ticketId} modifi√©e: ${previousState.assignedUser} -> ${ticketDetails.users_id_recipient}`);
          
          // Notifier les abonn√©s
          await notificationService.notifyTicketSubscribers(ticketId, 'assignment', {
            userId: ticketDetails.users_id_recipient
          });
        }
        
        // Changement d'attribution (groupe)
        if (ticketDetails.groups_id_assign !== previousState.assignedGroup) {
          console.log(`Attribution du ticket #${ticketId} modifi√©e: ${previousState.assignedGroup} -> ${ticketDetails.groups_id_assign}`);
          
          // Notifier les abonn√©s
          await notificationService.notifyTicketSubscribers(ticketId, 'assignment', {
            groupId: ticketDetails.groups_id_assign
          });
        }
        
        // V√©rifier les nouveaux commentaires
        const currentFollowupsCount = await ticketMonitorService.getTicketFollowupsCount(ticketId);
        
        if (currentFollowupsCount > previousState.followups) {
          console.log(`Nouveaux commentaires sur le ticket #${ticketId}: ${previousState.followups} -> ${currentFollowupsCount}`);
          
          // R√©cup√©rer les nouveaux commentaires
          const newFollowups = await ticketMonitorService.getNewTicketFollowups(ticketId, previousState.followups);
          
          // Notifier pour chaque nouveau commentaire
          for (const followup of newFollowups) {
            await notificationService.notifyTicketSubscribers(ticketId, 'comment', {
              content: followup.content,
              author: followup.users_id_editor ? `ID: ${followup.users_id_editor}` : 'Syst√®me'
            });
          }
        }
        
        // Mettre √† jour l'√©tat du ticket
        ticketStates[ticketId] = {
          lastUpdate: currentUpdateTime,
          status: ticketDetails.status,
          assignedUser: ticketDetails.users_id_recipient,
          assignedGroup: ticketDetails.groups_id_assign,
          followups: currentFollowupsCount
        };
        
        console.log(`√âtat du ticket #${ticketId} mis √† jour`);
      } else {
        console.log(`Aucune modification du ticket #${ticketId} depuis la derni√®re v√©rification`);
      }
    } catch (error) {
      console.error(`Erreur lors de la v√©rification des mises √† jour du ticket #${ticketId}:`, error);
    }
  },
  
  /**
   * Obtenir le nombre de commentaires d'un ticket
   * @param {number} ticketId - ID du ticket
   * @returns {Promise<number>} - Nombre de commentaires
   */
  getTicketFollowupsCount: async (ticketId) => {
    try {
      const followups = await glpiService.getTicketFollowups(ticketId);
      return followups.length;
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration des commentaires du ticket #${ticketId}:`, error);
      return 0;
    }
  },
  
  /**
   * Obtenir les nouveaux commentaires d'un ticket
   * @param {number} ticketId - ID du ticket
   * @param {number} previousCount - Nombre de commentaires pr√©c√©dent
   * @returns {Promise<Array>} - Liste des nouveaux commentaires
   */
  getNewTicketFollowups: async (ticketId, previousCount) => {
    try {
      const followups = await glpiService.getTicketFollowups(ticketId);
      
      // Trier les commentaires par date (du plus r√©cent au plus ancien)
      followups.sort((a, b) => new Date(b.date_creation) - new Date(a.date_creation));
      
      // R√©cup√©rer les nouveaux commentaires
      return followups.slice(0, followups.length - previousCount);
    } catch (error) {
      console.error(`Erreur lors de la r√©cup√©ration des nouveaux commentaires du ticket #${ticketId}:`, error);
      return [];
    }
  },
  
  /**
   * Surveiller un nouveau ticket
   * @param {number} ticketId - ID du ticket
   * @returns {Promise<boolean>} - True si le ticket a √©t√© ajout√© √† la surveillance
   */
  monitorTicket: async (ticketId) => {
    try {
      // V√©rifier si le ticket existe
      const ticketDetails = await glpiService.getTicket(ticketId);
      
      if (!ticketDetails) {
        console.log(`Ticket #${ticketId} non trouv√©, impossible de le surveiller`);
        return false;
      }
      
      // Enregistrer l'√©tat initial du ticket
      ticketStates[ticketId] = {
        lastUpdate: new Date(ticketDetails.date_mod).getTime(),
        status: ticketDetails.status,
        assignedUser: ticketDetails.users_id_recipient,
        assignedGroup: ticketDetails.groups_id_assign,
        followups: await ticketMonitorService.getTicketFollowupsCount(ticketId)
      };
      
      console.log(`Ticket #${ticketId} ajout√© √† la surveillance`);
      return true;
    } catch (error) {
      console.error(`Erreur lors de l'ajout du ticket #${ticketId} √† la surveillance:`, error);
      return false;
    }
  },
  
  /**
   * Arr√™ter la surveillance d'un ticket
   * @param {number} ticketId - ID du ticket
   * @returns {boolean} - True si le ticket a √©t√© retir√© de la surveillance
   */
  stopMonitoring: (ticketId) => {
    if (ticketStates[ticketId]) {
      delete ticketStates[ticketId];
      console.log(`Ticket #${ticketId} retir√© de la surveillance`);
      return true;
    }
    
    return false;
  },
  
  /**
   * Notifier le cr√©ateur d'un ticket lors de sa cr√©ation
   * @param {number} ticketId - ID du ticket
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone du cr√©ateur
   * @returns {Promise<boolean>} - True si la notification a √©t√© envoy√©e
   */
  notifyTicketCreation: async (ticketId, phoneNumber) => {
    try {
      // R√©cup√©rer les d√©tails du ticket
      const ticketDetails = await glpiService.getTicket(ticketId);
      
      if (!ticketDetails) {
        console.log(`Ticket #${ticketId} non trouv√©, impossible d'envoyer la notification de cr√©ation`);
        return false;
      }
      
      // Formater le message de notification
      const message = `‚úÖ *Ticket cr√©√© avec succ√®s*\n\n` +
        `üìù *Num√©ro:* #${ticketId}\n` +
        `üìã *Titre:* ${ticketDetails.name}\n` +
        `üîñ *Type:* ${glpiService.getTicketTypeName(ticketDetails.type)}\n` +
        `üö¶ *Statut:* ${glpiService.getTicketStatusName(ticketDetails.status)}\n` +
        `üî• *Urgence:* ${glpiService.getUrgencyName(ticketDetails.urgency)}\n\n` +
        `Vous √™tes maintenant abonn√© aux notifications pour ce ticket. Vous recevrez automatiquement un message lorsque le statut change, un commentaire est ajout√© ou le ticket est attribu√©.`;
      
      // Cr√©er les boutons pour les actions rapides
      const buttons = [
        {
          type: "reply",
          reply: {
            id: `track_ticket_${ticketId}`,
            title: "üìã Voir d√©tails"
          }
        },
        {
          type: "reply",
          reply: {
            id: `view_comments_${ticketId}`,
            title: "üí¨ Voir commentaires"
          }
        },
        {
          type: "reply",
          reply: {
            id: `comment_ticket_${ticketId}`,
            title: "üìù Commenter"
          }
        }
      ];
      
      // Envoyer la notification
      await whatsappService.sendButtonsMessage(phoneNumber, message, buttons, "Ticket cr√©√©");
      
      // Abonner automatiquement l'utilisateur aux notifications pour ce ticket
      notificationService.subscribeToTicket(phoneNumber, ticketId);
      
      // Commencer √† surveiller le ticket
      await ticketMonitorService.monitorTicket(ticketId);
      
      console.log(`Notification de cr√©ation du ticket #${ticketId} envoy√©e √† ${phoneNumber}`);
      return true;
    } catch (error) {
      console.error(`Erreur lors de l'envoi de la notification de cr√©ation du ticket #${ticketId}:`, error);
      return false;
    }
  }
};

module.exports = ticketMonitorService;
