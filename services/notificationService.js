/**
 * Service de gestion des notifications pour les tickets GLPI
 * Permet d'envoyer des notifications aux utilisateurs lorsque des tickets sont mis √† jour
 */

const whatsappService = require('./whatsappService');
const sessionManager = require('./sessionManager');
const ticketTrackingService = require('./ticketTrackingService');
const glpiService = require('./glpiService');

// Stockage des abonnements aux tickets
// Format: { phoneNumber: [ticketIds] }
const userSubscriptions = {};

const notificationService = {
  /**
   * S'abonner aux mises √† jour d'un ticket
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone de l'utilisateur
   * @param {number} ticketId - ID du ticket
   * @returns {boolean} - True si l'abonnement a r√©ussi
   */
  subscribeToTicket: (phoneNumber, ticketId) => {
    try {
      // Convertir en nombre
      const ticketIdNum = parseInt(ticketId);
      
      if (isNaN(ticketIdNum)) {
        throw new Error("ID de ticket invalide");
      }
      
      // Initialiser le tableau d'abonnements pour cet utilisateur si n√©cessaire
      if (!userSubscriptions[phoneNumber]) {
        userSubscriptions[phoneNumber] = [];
      }
      
      // V√©rifier si l'utilisateur est d√©j√† abonn√© √† ce ticket
      if (!userSubscriptions[phoneNumber].includes(ticketIdNum)) {
        userSubscriptions[phoneNumber].push(ticketIdNum);
        console.log(`Utilisateur ${phoneNumber} abonn√© au ticket #${ticketIdNum}`);
      }
      
      return true;
    } catch (error) {
      console.error(`Erreur lors de l'abonnement au ticket ${ticketId}:`, error);
      return false;
    }
  },
  
  /**
   * Se d√©sabonner des mises √† jour d'un ticket
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone de l'utilisateur
   * @param {number} ticketId - ID du ticket
   * @returns {boolean} - True si le d√©sabonnement a r√©ussi
   */
  unsubscribeFromTicket: (phoneNumber, ticketId) => {
    try {
      // Convertir en nombre
      const ticketIdNum = parseInt(ticketId);
      
      if (isNaN(ticketIdNum) || !userSubscriptions[phoneNumber]) {
        return false;
      }
      
      // Supprimer le ticket de la liste des abonnements de l'utilisateur
      const index = userSubscriptions[phoneNumber].indexOf(ticketIdNum);
      if (index !== -1) {
        userSubscriptions[phoneNumber].splice(index, 1);
        console.log(`Utilisateur ${phoneNumber} d√©sabonn√© du ticket #${ticketIdNum}`);
        
        // Supprimer l'utilisateur de la liste si plus aucun abonnement
        if (userSubscriptions[phoneNumber].length === 0) {
          delete userSubscriptions[phoneNumber];
        }
      }
      
      return true;
    } catch (error) {
      console.error(`Erreur lors du d√©sabonnement du ticket ${ticketId}:`, error);
      return false;
    }
  },
  
  /**
   * V√©rifier si un utilisateur est abonn√© √† un ticket
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone de l'utilisateur
   * @param {number} ticketId - ID du ticket
   * @returns {boolean} - True si l'utilisateur est abonn√©
   */
  isSubscribed: (phoneNumber, ticketId) => {
    const ticketIdNum = parseInt(ticketId);
    
    if (isNaN(ticketIdNum) || !userSubscriptions[phoneNumber]) {
      return false;
    }
    
    return userSubscriptions[phoneNumber].includes(ticketIdNum);
  },
  
  /**
   * Notifier tous les abonn√©s d'un ticket
   * @param {number} ticketId - ID du ticket
   * @param {string} updateType - Type de mise √† jour (status, comment, assignment)
   * @param {Object} updateData - Donn√©es de la mise √† jour
   * @returns {Promise<boolean>} - True si les notifications ont √©t√© envoy√©es
   */
  notifyTicketSubscribers: async (ticketId, updateType, updateData) => {
    try {
      const ticketIdNum = parseInt(ticketId);
      
      if (isNaN(ticketIdNum)) {
        return false;
      }
      
      // Trouver tous les utilisateurs abonn√©s √† ce ticket
      const subscribers = [];
      for (const [phoneNumber, subscriptions] of Object.entries(userSubscriptions)) {
        if (subscriptions.includes(ticketIdNum)) {
          subscribers.push(phoneNumber);
        }
      }
      
      if (subscribers.length === 0) {
        return false; // Aucun abonn√© pour ce ticket
      }
      
      // R√©cup√©rer les d√©tails du ticket
      const ticketDetails = await ticketTrackingService.getTicketDetails(ticketIdNum);
      
      // Pr√©parer le message de notification en fonction du type de mise √† jour
      let notificationMessage = `üîî *Mise √† jour du ticket #${ticketIdNum}*\n\n`;
      
      // Ajouter le titre du ticket
      notificationMessage += `üìã *Titre:* ${ticketDetails.title}\n\n`;
      
      switch (updateType) {
        case 'status':
          notificationMessage += `üö¶ *Le statut du ticket a √©t√© modifi√©*\n\n`;
          notificationMessage += `‚¨ÖÔ∏è Ancien statut: *${glpiService.getTicketStatusName(updateData.previousStatus)}*\n`;
          notificationMessage += `‚û°Ô∏è Nouveau statut: *${glpiService.getTicketStatusName(updateData.status)}*\n`;
          break;
          
        case 'comment':
          notificationMessage += `üí¨ *Un nouveau commentaire a √©t√© ajout√©*\n\n`;
          notificationMessage += `"${updateData.content.substring(0, 200)}${updateData.content.length > 200 ? '...' : ''}"\n\n`;
          notificationMessage += `üë§ Ajout√© par: *${updateData.author || 'Un utilisateur'}*\n`;
          break;
          
        case 'assignment':
          if (updateData.userId) {
            notificationMessage += `üë§ *Le ticket a √©t√© assign√© √† un technicien*\n\n`;
            notificationMessage += `Technicien: *${updateData.userName || `ID: ${updateData.userId}`}*\n`;
          } else if (updateData.groupId) {
            notificationMessage += `üë• *Le ticket a √©t√© assign√© √† un groupe*\n\n`;
            notificationMessage += `Groupe: *${updateData.groupName || `ID: ${updateData.groupId}`}*\n`;
          }
          break;
        
        case 'requester':
          notificationMessage += `üë§ *Un nouveau demandeur a √©t√© ajout√© au ticket*\n\n`;
          notificationMessage += `Demandeur: *${updateData.requesterName || 'Non sp√©cifi√©'}*\n`;
          break;
          
        default:
          notificationMessage += `‚ÑπÔ∏è *Le ticket a √©t√© mis √† jour*\n`;
      }
      
      // Ajouter la date et l'heure de la mise √† jour
      const now = new Date();
      notificationMessage += `\nüìÖ *Date:* ${now.toLocaleDateString('fr-FR')}`;
      notificationMessage += `\n‚è∞ *Heure:* ${now.toLocaleTimeString('fr-FR')}`;
      
      // Cr√©er les boutons pour les actions rapides
      const buttons = [
        {
          type: "reply",
          reply: {
            id: `track_ticket_${ticketIdNum}`,
            title: "Voir d√©tails"
          }
        },
        {
          type: "reply",
          reply: {
            id: `view_comments_${ticketIdNum}`,
            title: "Commentaires"
          }
        },
        {
          type: "reply",
          reply: {
            id: `comment_ticket_${ticketIdNum}`,
            title: "Commenter"
          }
        }
      ];
      
      // Envoyer la notification √† tous les abonn√©s
      for (const phoneNumber of subscribers) {
        await whatsappService.sendButtonsMessage(phoneNumber, notificationMessage, buttons, "Mise √† jour du ticket");
      }
      
      return true;
    } catch (error) {
      console.error(`Erreur lors de l'envoi des notifications pour le ticket ${ticketId}:`, error);
      return false;
    }
  },
  
  /**
   * Obtenir la liste des tickets auxquels un utilisateur est abonn√©
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone de l'utilisateur
   * @returns {Array<number>} - Liste des IDs de tickets
   */
  getUserSubscriptions: (phoneNumber) => {
    // Si l'utilisateur n'a pas d'abonnements, retourner un tableau vide
    if (!userSubscriptions[phoneNumber]) {
      return [];
    }
    
    // Retourner directement la liste des tickets auxquels l'utilisateur est abonn√©
    return [...userSubscriptions[phoneNumber]];
  },
  
  /**
   * Obtenir la liste des abonn√©s √† un ticket
   * @param {number} ticketId - ID du ticket
   * @returns {Array<string>} - Liste des num√©ros de t√©l√©phone
   */
  getTicketSubscribers: (ticketId) => {
    const ticketIdNum = parseInt(ticketId);
    const subscribers = [];
    
    if (isNaN(ticketIdNum)) {
      return [];
    }
    
    // Parcourir tous les utilisateurs et v√©rifier s'ils sont abonn√©s √† ce ticket
    for (const [phoneNumber, subscriptions] of Object.entries(userSubscriptions)) {
      if (subscriptions.includes(ticketIdNum)) {
        subscribers.push(phoneNumber);
      }
    }
    
    return subscribers;
  },
  
  /**
   * Formater un message pour afficher les abonnements d'un utilisateur
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone de l'utilisateur
   * @returns {Promise<Object>} - Message format√© et boutons
   */
  formatUserSubscriptionsMessage: async (phoneNumber) => {
    try {
      // R√©cup√©rer les abonnements de l'utilisateur
      const userSubscriptions = notificationService.getUserSubscriptions(phoneNumber);
      
      if (userSubscriptions.length === 0) {
        return {
          message: "üîî *Syst√®me d'Abonnements*\n\n*Qu'est-ce que c'est ?*\nLes abonnements vous permettent de suivre automatiquement les mises √† jour de vos tickets importants.\n\n*Avantages :*\n‚Ä¢ Recevez des notifications instantan√©es\n‚Ä¢ Suivez les changements de statut\n‚Ä¢ Soyez inform√© des nouveaux commentaires\n\n*Statut actuel :*\nVous n'√™tes actuellement abonn√© √† aucun ticket.\n\n*Menu Abonnements :*\nChoisissez une des trois options ci-dessous.",
          buttons: [
            {
              type: "reply",
              reply: {
                id: "view_subscriptions",
                title: "üîç Voir mes abonnements"
              }
            },
            {
              type: "reply",
              reply: {
                id: "add_subscription",
                title: "‚ûï Ajouter un abonnement"
              }
            },
            {
              type: "reply",
              reply: {
                id: "remove_subscription",
                title: "‚ùå Supprimer un abonnement"
              }
            },
            {
              type: "reply",
              reply: {
                id: "back_to_menu",
                title: "üè† Menu principal"
              }
            }
          ]
        };
      }
      
      // R√©cup√©rer les d√©tails des tickets
      let message = "üîî *Vos Abonnements Actifs*\n\n*Fonctionnement :*\nVous recevrez des notifications automatiques pour tous les tickets list√©s ci-dessous.\n\n*Vos tickets suivis :*\n";
      const ticketButtons = [];
      
      for (const ticketId of userSubscriptions) {
        try {
          const ticketDetails = await ticketTrackingService.getTicketDetails(ticketId);
          
          if (ticketDetails) {
            // Ajouter les informations du ticket au message
            message += `üéü *Ticket #${ticketId}*\n`;
            message += `üìã Titre: ${ticketDetails.title || ticketDetails.name}\n`;
            message += `üö¶ Statut: ${glpiService.getTicketStatusName(ticketDetails.status)}\n\n`;
            
            // Ajouter des boutons pour ce ticket (limit√© √† 3 tickets)
            if (ticketButtons.length < 3) {
              // Bouton pour consulter le ticket
              ticketButtons.push({
                id: `track_ticket_${ticketId}`,
                title: `üîç Ticket #${ticketId}`
              });
              
              // Bouton pour se d√©sabonner du ticket
              ticketButtons.push({
                id: `unsub_ticket_${ticketId}`,
                title: `‚ùå D√©sabo #${ticketId}`
              });
            }
          } else {
            message += `üéü *Ticket #${ticketId}* (D√©tails non disponibles)\n\n`;
          }
        } catch (error) {
          console.error(`Erreur lors de la r√©cup√©ration des d√©tails du ticket ${ticketId}:`, error);
          message += `üéü *Ticket #${ticketId}* (Erreur lors de la r√©cup√©ration des d√©tails)\n\n`;
        }
      }
      
      // Ajouter un message d'instructions pour la gestion des abonnements
      message += "\n*Menu Abonnements :*\n";
      message += "Choisissez une des trois options ci-dessous.\n";
      
      // Ajouter uniquement les 3 boutons demand√©s + menu
      const buttons = [
        {
          type: "reply",
          reply: {
            id: "view_subscriptions",
            title: "üîç Voir mes abonnements"
          }
        },
        {
          type: "reply",
          reply: {
            id: "add_subscription",
            title: "‚ûï Ajouter un abonnement"
          }
        },
        {
          type: "reply",
          reply: {
            id: "remove_subscription",
            title: "‚ùå Supprimer un abonnement"
          }
        },
        {
          type: "reply",
          reply: {
            id: "back_to_menu",
            title: "üè† Menu principal"
          }
        }
      ];
      
      return {
        message,
        buttons
      };
    } catch (error) {
      console.error(`Erreur lors de la formatation du message d'abonnements pour ${phoneNumber}:`, error);
      return {
        message: "‚ùó Une erreur s'est produite lors de la r√©cup√©ration de vos abonnements. Veuillez r√©essayer plus tard.",
        buttons: [
          {
            type: "reply",
            reply: {
              id: "back_to_menu",
              title: "Menu principal"
            }
          }
        ]
      };
    }
  },
  
  /**
   * D√©clencher une notification pour un ticket mis √† jour
   * @param {number} ticketId - ID du ticket
   * @param {string} updateType - Type de mise √† jour (status, comment, assignment, requester, close)
   * @param {Object} updateData - Donn√©es de la mise √† jour
   * @returns {Promise<boolean>} - True si la notification a √©t√© envoy√©e
   */
  triggerTicketUpdateNotification: async (ticketId, updateType, updateData = {}) => {
    try {
      console.log(`D√©clenchement d'une notification pour le ticket #${ticketId}, type: ${updateType}`);
      
      // V√©rifier s'il y a des abonn√©s pour ce ticket
      const subscribers = notificationService.getTicketSubscribers(ticketId);
      
      if (subscribers.length === 0) {
        console.log(`Aucun abonn√© pour le ticket #${ticketId}, notification non envoy√©e`);
        return false;
      }
      
      // Envoyer la notification aux abonn√©s
      return await notificationService.notifyTicketSubscribers(ticketId, updateType, updateData);
    } catch (error) {
      console.error(`Erreur lors du d√©clenchement de la notification pour le ticket ${ticketId}:`, error);
      return false;
    }
  },
  
  /**
   * V√©rifier si un utilisateur est abonn√© √† un ticket
   * @param {string} phoneNumber - Num√©ro de t√©l√©phone de l'utilisateur
   * @param {number} ticketId - ID du ticket
   * @returns {boolean} - True si l'utilisateur est abonn√©
   */
  isSubscribedToTicket: (phoneNumber, ticketId) => {
    return notificationService.isSubscribed(phoneNumber, ticketId);
  }
};

module.exports = notificationService;
